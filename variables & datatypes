JavaScript: Variables and Data Types

Variables in JavaScript:
A variable is a named container that stores data that can be manipulated and referenced later in the code.

Declaring Variables
In JavaScript, variables are declared using three keywords: var, let, and const.

1)var
Declares a variable with function scope or globally if declared outside a function.
Can be redeclared and updated.

Example:
var x = 5;
console.log(x); // Output: 5

2)let
Declares a block-scoped variable, available only within the block where it is defined.
Can be updated but not redeclared within the same scope.

Example:
let y = 10;
y = 15;
console.log(y); // Output: 15

3)const
Declares a block-scoped, read-only constant.
Must be initialized at the time of declaration and cannot be reassigned.

Example:
const z = 20;
console.log(z); // Output: 20

Data Types in JavaScript
JavaScript is a dynamically typed language, meaning the data type of a variable is determined automatically during runtime.

Primitive Data Types

1)Number:
Represents both integer and floating-point numbers.
let num = 42;
Example:
let floatNum = 3.14;

2)String
A sequence of characters enclosed in single (') or double (") quotes.
Example:
let str = "Hello, World!";

3)Boolean
Represents a logical entity and can have two values: true or false.
Example:
let isActive = true;

4)Null
Represents an intentional absence of any object value.
Example:
let emptyValue = null;

5)Undefined
Represents a variable that has been declared but not yet assigned a value.
Example:
let notAssigned;
console.log(notAssigned); // Output: undefined

6)Symbol (ES6)
Represents a unique and immutable value, often used as keys for object properties.
Example:
let sym = Symbol("uniqueIdentifier");

7)BigInt (ES2020)
Represents integers with arbitrary precision.
Example:
  let bigIntNum = 9007199254740991n;

8)Non-Primitive Data Types
Object
A collection of key-value pairs. An object can contain multiple properties and methods.
Example:
let person = {
    name: "John",
    age: 30
};

